import jsPDF from 'jspdf';
import { format } from 'date-fns';

interface WellnessData {
  moodEntries: any[];
  assessments: any[];
  symptoms: any[];
  stressLevels: any[];
  userProfile: any;
}

export const generateWellnessPDF = async (data: WellnessData): Promise<Blob> => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  let yPosition = 20;

  // Header
  pdf.setFontSize(20);
  pdf.setTextColor(16, 185, 129); // Emerald color
  pdf.text('WholeMe Wellness Report', pageWidth / 2, yPosition, { align: 'center' });
  
  yPosition += 15;
  pdf.setFontSize(12);
  pdf.setTextColor(100, 100, 100);
  pdf.text(`Generated on ${format(new Date(), 'PPP')}`, pageWidth / 2, yPosition, { align: 'center' });
  
  yPosition += 20;
  pdf.setTextColor(0, 0, 0);

  // Patient Info
  pdf.setFontSize(16);
  pdf.text('Patient Information', 20, yPosition);
  yPosition += 10;
  
  pdf.setFontSize(12);
  pdf.text(`Name: ${data.userProfile?.first_name || 'N/A'} ${data.userProfile?.last_name || ''}`, 20, yPosition);
  yPosition += 8;
  pdf.text(`Email: ${data.userProfile?.email || 'N/A'}`, 20, yPosition);
  yPosition += 8;
  pdf.text(`Report Period: Last 30 days`, 20, yPosition);
  yPosition += 20;

  // Mood Summary
  if (data.moodEntries.length > 0) {
    pdf.setFontSize(16);
    pdf.text('Mood Tracking Summary', 20, yPosition);
    yPosition += 10;
    
    const avgMood = data.moodEntries.reduce((sum, entry) => sum + entry.mood_rating, 0) / data.moodEntries.length;
    pdf.setFontSize(12);
    pdf.text(`Average Mood: ${avgMood.toFixed(1)}/8`, 20, yPosition);
    yPosition += 8;
    pdf.text(`Total Entries: ${data.moodEntries.length}`, 20, yPosition);
    yPosition += 8;
    
    // Recent entries
    pdf.text('Recent Mood Entries:', 20, yPosition);
    yPosition += 8;
    
    data.moodEntries.slice(0, 5).forEach((entry, index) => {
      const date = format(new Date(entry.created_at), 'MMM dd');
      pdf.text(`${date}: Mood ${entry.mood_rating}/8, Energy ${entry.energy_level}/10`, 25, yPosition);
      yPosition += 6;
    });
    yPosition += 10;
  }

  // Stress Levels
  if (data.stressLevels.length > 0) {
    pdf.setFontSize(16);
    pdf.text('Stress Level Analysis', 20, yPosition);
    yPosition += 10;
    
    const avgStress = data.stressLevels.reduce((sum, entry) => sum + entry.level, 0) / data.stressLevels.length;
    pdf.setFontSize(12);
    pdf.text(`Average Stress: ${avgStress.toFixed(1)}/10`, 20, yPosition);
    yPosition += 8;
    pdf.text(`High Stress Days: ${data.stressLevels.filter(s => s.level > 7).length}`, 20, yPosition);
    yPosition += 15;
  }

  // Symptoms
  if (data.symptoms.length > 0) {
    pdf.setFontSize(16);
    pdf.text('Symptom Tracking', 20, yPosition);
    yPosition += 10;
    
    pdf.setFontSize(12);
    data.symptoms.slice(0, 8).forEach((symptom, index) => {
      pdf.text(`${symptom.name}: ${symptom.value}/${symptom.scale}`, 20, yPosition);
      yPosition += 6;
    });
    yPosition += 10;
  }

  // Footer
  pdf.setFontSize(10);
  pdf.setTextColor(100, 100, 100);
  pdf.text('Generated by WholeMe - Comprehensive Wellness Tracking', pageWidth / 2, pdf.internal.pageSize.getHeight() - 10, { align: 'center' });

  return pdf.output('blob');
};